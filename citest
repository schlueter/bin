#!/usr/bin/env python
# -*- coding: utf8 -*-

import argparse
import os
import subprocess
import time

import yaml

try:
    from termcolor import colored
except ImportError:
    def colored(string, color):
        return string
try:
    from watchdog.observers import Observer
    from watchdog.events import RegexMatchingEventHandler
except ImportError:
    print(colored('Failed to import watchdog, watch option will be unavailable.', 'red'))


class CiRunner:

    @classmethod
    def run_scripts(self, ci_test_file, exit_after_fail=False):
        rcs = []

        with open(ci_test_file) as travisfile:
            for script in yaml.load(travisfile)['script']:
                print(colored('Running {}'.format(script), 'blue'))

                try:
                    rc = subprocess.call(script, shell=True)
                except KeyboardInterrupt:
                    print(colored('Aborting, try again later ;)', 'blue'))

                if rc != 0:
                    rcs.append(rc)
                    print(colored('Script {} failed with {}'.format(script, rc), 'red'))

        if rcs:
            print(colored('Scripts failed :(\n', 'red'))
        else:
            print(colored('Scripts passed :)\n', 'green'))

        if exit_after_fail and rcs:
            exit(max(rcs))


    @classmethod
    def watch_repo(self, ci_test_file):

        class TravisCiRunnerEventHandler(RegexMatchingEventHandler):
            def on_any_event(self, event):
                print(u'Detected that {} was {}, running travis testsâ€¦\n'.format(
                     event.src_path, event.event_type))
                CiRunner.run_scripts(ci_test_file)

        path = os.path.realpath('.')
        print(colored('Watching {}'.format(path), 'green'))
        event_handler = TravisCiRunnerEventHandler(ignore_regexes=['/\.git/'],
                                                   ignore_directories=True)

        observer = Observer()
        observer.schedule(event_handler, path, recursive=True)
        observer.start()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog='citest')
    parser.add_argument('--watch',
                        action='store_true',
                        help='Watch the current directory for changes and run the travis tests on changes')
    parser.add_argument('-f',
                        '--test-file',
                        default='.travis.yml',
                        help='File where ci tests are defined')
    args = parser.parse_args()

    if not os.path.isfile(args.test_file):
        parser.print_help()
        exit(1)

    if args.watch:
        CiRunner.watch_repo(args.test_file)
    else:
        CiRunner.run_scripts(args.test_file, True)
