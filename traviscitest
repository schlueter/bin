#!/usr/bin/env python
# -*- coding: utf8 -*-

import argparse
import os
import subprocess
import time

import yaml
from termcolor import colored
from watchdog.observers import Observer
from watchdog.events import RegexMatchingEventHandler


class TravisCiRunner:

    @classmethod
    def run_scripts(self, exit_after_fail=False):
        rcs = []

        with open(".travis.yml") as travisfile:
            for script in yaml.load(travisfile)["script"]:
                print(colored("Running {}".format(script), "blue"))

                try:
                    rc = subprocess.call(script, shell=True)
                except KeyboardInterrupt:
                    print(colored("Aborting, try again later ;)", "blue"))

                if rc != 0:
                    rcs.append(rc)
                    print(colored("Script {} failed with {}".format(script, rc), "red"))

        if rcs:
            print(colored("Scripts failed :(\n", "red"))
        else:
            print(colored("Scripts passed :)\n", "green"))

        if exit_after_fail and rcs:
            exit(max(rcs))


    @classmethod
    def watch_repo(self):

        class TravisCiRunnerEventHandler(RegexMatchingEventHandler):
            def on_any_event(self, event):
                print(u"Detected that {} was {}, running travis testsâ€¦\n".format(
                     event.src_path, event.event_type))
                TravisCiRunner.run_scripts()

        path = os.path.realpath('.')
        print(colored("Watching {}".format(path), "green"))
        event_handler = TravisCiRunnerEventHandler(ignore_regexes=["/\.git/"],
                                                   ignore_directories=True)

        observer = Observer()
        observer.schedule(event_handler, path, recursive=True)
        observer.start()

        try:
            while True:
                time.sleep(1)
        except KeyboardInterrupt:
            observer.stop()
        observer.join()


if __name__ == '__main__':
    parser = argparse.ArgumentParser(prog="traviscitest")
    parser.add_argument("--watch",
                        action="store_true",
                        help="Watch the current directory for changes and run the travis tests on changes")
    args = parser.parse_args()

    if not os.path.isfile('.travis.yml'):
        parser.print_help()
        exit(1)

    if args.watch:
        TravisCiRunner.watch_repo()
    else:
        TravisCiRunner.run_scripts(True)
